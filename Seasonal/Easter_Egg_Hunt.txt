@name Easter Egg Hunt
@inputs 
@outputs 
@persist Num_Eggs Distance Found Over
@trigger 

function void create_eggs() {
    I = 0
    while(I < Num_Eggs) {
        holoCreate(I,entity():pos() + vec(random(-Distance,Distance),random(-Distance,Distance),8), vec(0.8,1.5,1.2), ang(random(0,20),random(0,20),random(0,20)), vec(random(1,255),random(1,255),random(1,255)), "hq_sphere")
        holoShadow(I,1)
        I++
    }
}

function number check_bounds(Pos:vector, Target:entity) {
    Distance_x = Pos:x() - Target:pos():x()
    Distance_y = Pos:y() - Target:pos():y()
    Distance_z = Pos:z() - Target:pos():z()
    if(abs(Distance_x) <= 30 & abs(Distance_y) <= 30 & abs(Distance_z) <= 50) {
        return 1
    }
    return 0
}

function void check_players() {
    for(I = 1, players():count()) {
    Player = players()[I,entity]
    J = 0
    while(J < Num_Eggs) {
        if(check_bounds(Player:pos(), holoEntity(J)) && holoEntity(J):getAlpha() > 0) {
            holoAlpha(J,0)
            Found++
            concmd("say [EggHunt]: " + Player:name() + " Found an egg!")
            return
        }
        else {
            J++
        }
    }
}

}


interval(150)

if(first()) {
    Over = 0
    Distance = 500
    Num_Eggs = 20
    create_eggs()
}
if(clk()){
    check_players()
}
if(Found == Num_Eggs && !Over) {
    concmd("say ALL EGGS FOUND!")
    Over = 1
}



